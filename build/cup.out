===== Terminals =====
[0]EOF [1]error [2]BOOLEANO [3]INTEGER [4]STRING 
[5]IF [6]ELSE [7]WHILE [8]RETURN [9]CLASS 
[10]EXTENDS [11]PUBLIC [12]STATIC [13]VOID [14]MAIN 
[15]TRUE [16]FALSE [17]THIS [18]LENGTH [19]NEW 
[20]SYSO [21]PLUS [22]MINUS [23]MULTI [24]AND 
[25]LESS [26]ASSIGN [27]NEGATION [28]DOT [29]VIRGULA 
[30]LCOCHETE [31]RCOCHETE [32]LPAREN [33]RPAREN [34]LCHAVE 
[35]RCHAVE [36]SCOLON [37]IDENTIFIER [38]INTEGER_LITERAL 

===== Non terminals =====
[0]Program [1]StatementList [2]MainClass [3]MethodDecl [4]MethodDeclList 
[5]Statement [6]Expression [7]ArrayLookup [8]ArrayLength [9]Identifier 
[10]TypePack [11]VarDeclaration [12]VarDeclarationList [13]FormalParameter [14]FormalParameterList
[15]FormalParameterListAndParens [16]MethodInvocationParameterList [17]ExpressionList [18]ClassDecl [19]ClassDeclList 


===== Productions =====
[0] Program ::= MainClass ClassDeclList 
[1] $START ::= Program EOF 
[2] StatementList ::= Statement StatementList 
[3] StatementList ::= 
[4] MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE 
[5] ClassDecl ::= CLASS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE 
[6] ClassDecl ::= CLASS Identifier EXTENDS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE 
[7] ClassDeclList ::= 
[8] ClassDeclList ::= ClassDecl ClassDeclList 
[9] MethodDeclList ::= 
[10] MethodDeclList ::= MethodDecl MethodDeclList 
[11] MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE
[12] Statement ::= Identifier ASSIGN Expression SCOLON 
[13] Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
[14] Statement ::= SYSO LPAREN Expression RPAREN SCOLON 
[15] Statement ::= Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON 
[16] Statement ::= WHILE LPAREN Expression RPAREN Statement 
[17] Statement ::= LCHAVE StatementList RCHAVE 
[18] Identifier ::= IDENTIFIER 
[19] Expression ::= IDENTIFIER 
[20] Expression ::= Expression PLUS Expression 
[21] Expression ::= Expression MINUS Expression 
[22] Expression ::= Expression MULTI Expression 
[23] Expression ::= Expression LESS Expression 
[24] Expression ::= Expression AND Expression 
[25] Expression ::= LPAREN Expression RPAREN 
[26] Expression ::= NEGATION Expression 
[27] Expression ::= TRUE 
[28] Expression ::= FALSE 
[29] Expression ::= THIS 
[30] Expression ::= NEW Identifier LPAREN RPAREN 
[31] Expression ::= ArrayLength 
[32] Expression ::= ArrayLookup 
[33] Expression ::= NEW INTEGER LCOCHETE Expression RCOCHETE 
[34] Expression ::= Expression DOT Identifier MethodInvocationParameterList 
[35] Expression ::= INTEGER_LITERAL 
[36] ArrayLength ::= Expression DOT LENGTH 
[37] ArrayLookup ::= Expression LCOCHETE Expression RCOCHETE 
[38] TypePack ::= INTEGER
[39] TypePack ::= BOOLEANO
[40] TypePack ::= Identifier
[41] TypePack ::= INTEGER LCOCHETE RCOCHETE
[42] VarDeclaration ::= TypePack Identifier SCOLON
[43] VarDeclarationList ::= 
[44] VarDeclarationList ::= VarDeclarationList VarDeclaration 
[45] FormalParameter ::= TypePack Identifier
[46] FormalParameterListAndParens ::= LPAREN RPAREN 
[47] FormalParameterListAndParens ::= LPAREN FormalParameterList RPAREN 
[48] FormalParameterList ::= FormalParameter VIRGULA FormalParameterList 
[49] FormalParameterList ::= FormalParameter 
[50] MethodInvocationParameterList ::= LPAREN RPAREN 
[51] MethodInvocationParameterList ::= LPAREN ExpressionList RPAREN 
[52] ExpressionList ::= Expression 
[53] ExpressionList ::= Expression VIRGULA ExpressionList 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [MainClass ::= (*) CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
  [$START ::= (*) Program EOF , {EOF }]
  [Program ::= (*) MainClass ClassDeclList , {EOF }]
}
transition on CLASS to state [3]
transition on MainClass to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [144]

-------------------
lalr_state [2]: {
  [ClassDeclList ::= (*) ClassDecl ClassDeclList , {EOF }]
  [ClassDecl ::= (*) CLASS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
  [ClassDeclList ::= (*) , {EOF }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
  [Program ::= MainClass (*) ClassDeclList , {EOF }]
}
transition on CLASS to state [99]
transition on ClassDecl to state [98]
transition on ClassDeclList to state [97]

-------------------
lalr_state [3]: {
  [Identifier ::= (*) IDENTIFIER , {LCHAVE }]
  [MainClass ::= CLASS (*) Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on Identifier to state [5]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [4]: {
  [Identifier ::= IDENTIFIER (*) , {EXTENDS ASSIGN VIRGULA LCOCHETE LPAREN RPAREN LCHAVE SCOLON IDENTIFIER }]
}

-------------------
lalr_state [5]: {
  [MainClass ::= CLASS Identifier (*) LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on LCHAVE to state [6]

-------------------
lalr_state [6]: {
  [MainClass ::= CLASS Identifier LCHAVE (*) PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on PUBLIC to state [7]

-------------------
lalr_state [7]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC (*) STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on STATIC to state [8]

-------------------
lalr_state [8]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC (*) VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on VOID to state [9]

-------------------
lalr_state [9]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID (*) MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on MAIN to state [10]

-------------------
lalr_state [10]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN (*) LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on LPAREN to state [11]

-------------------
lalr_state [11]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN (*) STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on STRING to state [12]

-------------------
lalr_state [12]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING (*) LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on LCOCHETE to state [13]

-------------------
lalr_state [13]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE (*) RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on RCOCHETE to state [14]

-------------------
lalr_state [14]: {
  [Identifier ::= (*) IDENTIFIER , {RPAREN }]
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE (*) Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on Identifier to state [15]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [15]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier (*) RPAREN LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on RPAREN to state [16]

-------------------
lalr_state [16]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN (*) LCHAVE Statement RCHAVE RCHAVE , {EOF CLASS }]
}
transition on LCHAVE to state [17]

-------------------
lalr_state [17]: {
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {RCHAVE }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {RCHAVE }]
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE (*) Statement RCHAVE RCHAVE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {ASSIGN LCOCHETE }]
  [Statement ::= (*) Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {RCHAVE }]
  [Statement ::= (*) Identifier ASSIGN Expression SCOLON , {RCHAVE }]
  [Statement ::= (*) LCHAVE StatementList RCHAVE , {RCHAVE }]
  [Statement ::= (*) SYSO LPAREN Expression RPAREN SCOLON , {RCHAVE }]
}
transition on Identifier to state [23]
transition on IF to state [22]
transition on LCHAVE to state [21]
transition on SYSO to state [20]
transition on WHILE to state [19]
transition on IDENTIFIER to state [4]
transition on Statement to state [18]

-------------------
lalr_state [18]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement (*) RCHAVE RCHAVE , {EOF CLASS }]
}
transition on RCHAVE to state [95]

-------------------
lalr_state [19]: {
  [Statement ::= WHILE (*) LPAREN Expression RPAREN Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on LPAREN to state [91]

-------------------
lalr_state [20]: {
  [Statement ::= SYSO (*) LPAREN Expression RPAREN SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on LPAREN to state [87]

-------------------
lalr_state [21]: {
  [Statement ::= LCHAVE (*) StatementList RCHAVE , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) LCHAVE StatementList RCHAVE , {IF WHILE SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) SYSO LPAREN Expression RPAREN SCOLON , {IF WHILE SYSO LCHAVE RCHAVE IDENTIFIER }]
  [StatementList ::= (*) Statement StatementList , {RCHAVE }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF WHILE SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF WHILE SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {ASSIGN LCOCHETE }]
  [Statement ::= (*) Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {IF WHILE SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) Identifier ASSIGN Expression SCOLON , {IF WHILE SYSO LCHAVE RCHAVE IDENTIFIER }]
  [StatementList ::= (*) , {RCHAVE }]
}
transition on StatementList to state [84]
transition on Identifier to state [23]
transition on LCHAVE to state [21]
transition on SYSO to state [20]
transition on IF to state [22]
transition on WHILE to state [19]
transition on IDENTIFIER to state [4]
transition on Statement to state [83]

-------------------
lalr_state [22]: {
  [Statement ::= IF (*) LPAREN Expression RPAREN Statement ELSE Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on LPAREN to state [77]

-------------------
lalr_state [23]: {
  [Statement ::= Identifier (*) LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= Identifier (*) ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on ASSIGN to state [25]
transition on LCOCHETE to state [24]

-------------------
lalr_state [24]: {
  [Statement ::= Identifier LCOCHETE (*) Expression RCOCHETE ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [72]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [25]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Statement ::= Identifier ASSIGN (*) Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [29]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [26]: {
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [Expression ::= NEW (*) INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= NEW (*) Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on Identifier to state [66]
transition on IDENTIFIER to state [4]
transition on INTEGER to state [65]

-------------------
lalr_state [27]: {
  [Expression ::= TRUE (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [28]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= NEGATION (*) Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [64]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [29]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Statement ::= Identifier ASSIGN Expression (*) SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on SCOLON to state [63]

-------------------
lalr_state [30]: {
  [Expression ::= FALSE (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [31]: {
  [Expression ::= THIS (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [32]: {
  [Expression ::= IDENTIFIER (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [33]: {
  [Expression ::= ArrayLength (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [34]: {
  [Expression ::= ArrayLookup (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [35]: {
  [Expression ::= LPAREN (*) Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [37]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [36]: {
  [Expression ::= INTEGER_LITERAL (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [37]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= LPAREN Expression (*) RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on RPAREN to state [38]

-------------------
lalr_state [38]: {
  [Expression ::= LPAREN Expression RPAREN (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [39]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression AND (*) Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [62]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [40]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLookup ::= Expression LCOCHETE (*) Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [60]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [41]: {
  [Expression ::= Expression PLUS (*) Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [59]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [42]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression MINUS (*) Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [58]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [43]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression LESS (*) Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [57]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [44]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression MULTI (*) Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [56]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [45]: {
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [Expression ::= Expression DOT (*) Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= Expression DOT (*) LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on Identifier to state [47]
transition on IDENTIFIER to state [4]
transition on LENGTH to state [46]

-------------------
lalr_state [46]: {
  [ArrayLength ::= Expression DOT LENGTH (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [47]: {
  [Expression ::= Expression DOT Identifier (*) MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [MethodInvocationParameterList ::= (*) LPAREN ExpressionList RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [MethodInvocationParameterList ::= (*) LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on MethodInvocationParameterList to state [49]
transition on LPAREN to state [48]

-------------------
lalr_state [48]: {
  [ExpressionList ::= (*) Expression , {RPAREN }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [MethodInvocationParameterList ::= LPAREN (*) RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ExpressionList ::= (*) Expression VIRGULA ExpressionList , {RPAREN }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [MethodInvocationParameterList ::= LPAREN (*) ExpressionList RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on RPAREN to state [52]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [51]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]
transition on ExpressionList to state [50]

-------------------
lalr_state [49]: {
  [Expression ::= Expression DOT Identifier MethodInvocationParameterList (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [50]: {
  [MethodInvocationParameterList ::= LPAREN ExpressionList (*) RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on RPAREN to state [55]

-------------------
lalr_state [51]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ExpressionList ::= Expression (*) VIRGULA ExpressionList , {RPAREN }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ExpressionList ::= Expression (*) , {RPAREN }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
}
transition on DOT to state [45]
transition on VIRGULA to state [53]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]

-------------------
lalr_state [52]: {
  [MethodInvocationParameterList ::= LPAREN RPAREN (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [53]: {
  [ExpressionList ::= (*) Expression , {RPAREN }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ExpressionList ::= Expression VIRGULA (*) ExpressionList , {RPAREN }]
  [ExpressionList ::= (*) Expression VIRGULA ExpressionList , {RPAREN }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RPAREN }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [51]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]
transition on ExpressionList to state [54]

-------------------
lalr_state [54]: {
  [ExpressionList ::= Expression VIRGULA ExpressionList (*) , {RPAREN }]
}

-------------------
lalr_state [55]: {
  [MethodInvocationParameterList ::= LPAREN ExpressionList RPAREN (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [56]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression MULTI Expression (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]

-------------------
lalr_state [57]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression LESS Expression (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]

-------------------
lalr_state [58]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression MINUS Expression (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]

-------------------
lalr_state [59]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression PLUS Expression (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]

-------------------
lalr_state [60]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLookup ::= Expression LCOCHETE Expression (*) RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on RCOCHETE to state [61]

-------------------
lalr_state [61]: {
  [ArrayLookup ::= Expression LCOCHETE Expression RCOCHETE (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [62]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression AND Expression (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]

-------------------
lalr_state [63]: {
  [Statement ::= Identifier ASSIGN Expression SCOLON (*) , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}

-------------------
lalr_state [64]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= NEGATION Expression (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]

-------------------
lalr_state [65]: {
  [Expression ::= NEW INTEGER (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on LCOCHETE to state [69]

-------------------
lalr_state [66]: {
  [Expression ::= NEW Identifier (*) LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on LPAREN to state [67]

-------------------
lalr_state [67]: {
  [Expression ::= NEW Identifier LPAREN (*) RPAREN , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}
transition on RPAREN to state [68]

-------------------
lalr_state [68]: {
  [Expression ::= NEW Identifier LPAREN RPAREN (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [69]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= NEW INTEGER LCOCHETE (*) Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [70]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [70]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= NEW INTEGER LCOCHETE Expression (*) RCOCHETE , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on RCOCHETE to state [71]

-------------------
lalr_state [71]: {
  [Expression ::= NEW INTEGER LCOCHETE Expression RCOCHETE (*) , {PLUS MINUS MULTI AND LESS DOT VIRGULA LCOCHETE RCOCHETE RPAREN SCOLON }]
}

-------------------
lalr_state [72]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Statement ::= Identifier LCOCHETE Expression (*) RCOCHETE ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RCOCHETE }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on RCOCHETE to state [73]

-------------------
lalr_state [73]: {
  [Statement ::= Identifier LCOCHETE Expression RCOCHETE (*) ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on ASSIGN to state [74]

-------------------
lalr_state [74]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Statement ::= Identifier LCOCHETE Expression RCOCHETE ASSIGN (*) Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [75]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [75]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Statement ::= Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression (*) SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on SCOLON to state [76]

-------------------
lalr_state [76]: {
  [Statement ::= Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON (*) , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}

-------------------
lalr_state [77]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Statement ::= IF LPAREN (*) Expression RPAREN Statement ELSE Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [78]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [78]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Statement ::= IF LPAREN Expression (*) RPAREN Statement ELSE Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on RPAREN to state [79]

-------------------
lalr_state [79]: {
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ELSE }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ELSE }]
  [Identifier ::= (*) IDENTIFIER , {ASSIGN LCOCHETE }]
  [Statement ::= (*) Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {ELSE }]
  [Statement ::= (*) Identifier ASSIGN Expression SCOLON , {ELSE }]
  [Statement ::= (*) LCHAVE StatementList RCHAVE , {ELSE }]
  [Statement ::= (*) SYSO LPAREN Expression RPAREN SCOLON , {ELSE }]
  [Statement ::= IF LPAREN Expression RPAREN (*) Statement ELSE Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on Identifier to state [23]
transition on IF to state [22]
transition on LCHAVE to state [21]
transition on SYSO to state [20]
transition on WHILE to state [19]
transition on IDENTIFIER to state [4]
transition on Statement to state [80]

-------------------
lalr_state [80]: {
  [Statement ::= IF LPAREN Expression RPAREN Statement (*) ELSE Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on ELSE to state [81]

-------------------
lalr_state [81]: {
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {ASSIGN LCOCHETE }]
  [Statement ::= (*) Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) Identifier ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= IF LPAREN Expression RPAREN Statement ELSE (*) Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) LCHAVE StatementList RCHAVE , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) SYSO LPAREN Expression RPAREN SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on Identifier to state [23]
transition on IF to state [22]
transition on LCHAVE to state [21]
transition on SYSO to state [20]
transition on WHILE to state [19]
transition on IDENTIFIER to state [4]
transition on Statement to state [82]

-------------------
lalr_state [82]: {
  [Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement (*) , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}

-------------------
lalr_state [83]: {
  [Statement ::= (*) LCHAVE StatementList RCHAVE , {IF WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) SYSO LPAREN Expression RPAREN SCOLON , {IF WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [StatementList ::= Statement (*) StatementList , {RETURN RCHAVE }]
  [StatementList ::= (*) Statement StatementList , {RETURN RCHAVE }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {ASSIGN LCOCHETE }]
  [Statement ::= (*) Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {IF WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) Identifier ASSIGN Expression SCOLON , {IF WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [StatementList ::= (*) , {RETURN RCHAVE }]
}
transition on StatementList to state [86]
transition on Identifier to state [23]
transition on LCHAVE to state [21]
transition on SYSO to state [20]
transition on IF to state [22]
transition on WHILE to state [19]
transition on IDENTIFIER to state [4]
transition on Statement to state [83]

-------------------
lalr_state [84]: {
  [Statement ::= LCHAVE StatementList (*) RCHAVE , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on RCHAVE to state [85]

-------------------
lalr_state [85]: {
  [Statement ::= LCHAVE StatementList RCHAVE (*) , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}

-------------------
lalr_state [86]: {
  [StatementList ::= Statement StatementList (*) , {RETURN RCHAVE }]
}

-------------------
lalr_state [87]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Statement ::= SYSO LPAREN (*) Expression RPAREN SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [88]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [88]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Statement ::= SYSO LPAREN Expression (*) RPAREN SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on RPAREN to state [89]

-------------------
lalr_state [89]: {
  [Statement ::= SYSO LPAREN Expression RPAREN (*) SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on SCOLON to state [90]

-------------------
lalr_state [90]: {
  [Statement ::= SYSO LPAREN Expression RPAREN SCOLON (*) , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}

-------------------
lalr_state [91]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Statement ::= WHILE LPAREN (*) Expression RPAREN Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [92]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [92]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Statement ::= WHILE LPAREN Expression (*) RPAREN Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE RPAREN }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on RPAREN to state [93]

-------------------
lalr_state [93]: {
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {ASSIGN LCOCHETE }]
  [Statement ::= (*) Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) Identifier ASSIGN Expression SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) LCHAVE StatementList RCHAVE , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= WHILE LPAREN Expression RPAREN (*) Statement , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
  [Statement ::= (*) SYSO LPAREN Expression RPAREN SCOLON , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on Identifier to state [23]
transition on IF to state [22]
transition on LCHAVE to state [21]
transition on SYSO to state [20]
transition on WHILE to state [19]
transition on IDENTIFIER to state [4]
transition on Statement to state [94]

-------------------
lalr_state [94]: {
  [Statement ::= WHILE LPAREN Expression RPAREN Statement (*) , {IF ELSE WHILE RETURN SYSO LCHAVE RCHAVE IDENTIFIER }]
}

-------------------
lalr_state [95]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE (*) RCHAVE , {EOF CLASS }]
}
transition on RCHAVE to state [96]

-------------------
lalr_state [96]: {
  [MainClass ::= CLASS Identifier LCHAVE PUBLIC STATIC VOID MAIN LPAREN STRING LCOCHETE RCOCHETE Identifier RPAREN LCHAVE Statement RCHAVE RCHAVE (*) , {EOF CLASS }]
}

-------------------
lalr_state [97]: {
  [Program ::= MainClass ClassDeclList (*) , {EOF }]
}

-------------------
lalr_state [98]: {
  [ClassDeclList ::= (*) ClassDecl ClassDeclList , {EOF }]
  [ClassDecl ::= (*) CLASS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
  [ClassDeclList ::= (*) , {EOF }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
  [ClassDeclList ::= ClassDecl (*) ClassDeclList , {EOF }]
}
transition on CLASS to state [99]
transition on ClassDecl to state [98]
transition on ClassDeclList to state [143]

-------------------
lalr_state [99]: {
  [ClassDecl ::= CLASS (*) Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {EXTENDS LCHAVE }]
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
}
transition on Identifier to state [100]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [100]: {
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
}
transition on LCHAVE to state [102]
transition on EXTENDS to state [101]

-------------------
lalr_state [101]: {
  [Identifier ::= (*) IDENTIFIER , {LCHAVE }]
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
}
transition on Identifier to state [138]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [102]: {
  [VarDeclarationList ::= (*) , {BOOLEANO INTEGER PUBLIC RCHAVE IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LCHAVE (*) VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
  [VarDeclarationList ::= (*) VarDeclarationList VarDeclaration , {BOOLEANO INTEGER PUBLIC RCHAVE IDENTIFIER }]
}
transition on VarDeclarationList to state [103]

-------------------
lalr_state [103]: {
  [TypePack ::= (*) Identifier , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LCHAVE VarDeclarationList (*) MethodDeclList RCHAVE , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
  [VarDeclaration ::= (*) TypePack Identifier SCOLON , {BOOLEANO INTEGER PUBLIC RCHAVE IDENTIFIER }]
  [TypePack ::= (*) BOOLEANO , {IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDecl MethodDeclList , {RCHAVE }]
  [VarDeclarationList ::= VarDeclarationList (*) VarDeclaration , {BOOLEANO INTEGER PUBLIC RCHAVE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER LCOCHETE RCOCHETE , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER , {IDENTIFIER }]
  [MethodDeclList ::= (*) , {RCHAVE }]
}
transition on MethodDeclList to state [111]
transition on IDENTIFIER to state [4]
transition on Identifier to state [110]
transition on VarDeclaration to state [109]
transition on MethodDecl to state [108]
transition on PUBLIC to state [107]
transition on BOOLEANO to state [106]
transition on INTEGER to state [105]
transition on TypePack to state [104]

-------------------
lalr_state [104]: {
  [Identifier ::= (*) IDENTIFIER , {SCOLON }]
  [VarDeclaration ::= TypePack (*) Identifier SCOLON , {BOOLEANO INTEGER IF WHILE RETURN PUBLIC SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on Identifier to state [136]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [105]: {
  [TypePack ::= INTEGER (*) , {IDENTIFIER }]
  [TypePack ::= INTEGER (*) LCOCHETE RCOCHETE , {IDENTIFIER }]
}
transition on LCOCHETE to state [134]

-------------------
lalr_state [106]: {
  [TypePack ::= BOOLEANO (*) , {IDENTIFIER }]
}

-------------------
lalr_state [107]: {
  [TypePack ::= (*) INTEGER LCOCHETE RCOCHETE , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER , {IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [TypePack ::= (*) Identifier , {IDENTIFIER }]
  [TypePack ::= (*) BOOLEANO , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
}
transition on Identifier to state [110]
transition on BOOLEANO to state [106]
transition on IDENTIFIER to state [4]
transition on TypePack to state [114]
transition on INTEGER to state [105]

-------------------
lalr_state [108]: {
  [MethodDeclList ::= MethodDecl (*) MethodDeclList , {RCHAVE }]
  [MethodDeclList ::= (*) MethodDecl MethodDeclList , {RCHAVE }]
  [MethodDeclList ::= (*) , {RCHAVE }]
  [MethodDecl ::= (*) PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
}
transition on PUBLIC to state [107]
transition on MethodDecl to state [108]
transition on MethodDeclList to state [113]

-------------------
lalr_state [109]: {
  [VarDeclarationList ::= VarDeclarationList VarDeclaration (*) , {BOOLEANO INTEGER IF WHILE RETURN PUBLIC SYSO LCHAVE RCHAVE IDENTIFIER }]
}

-------------------
lalr_state [110]: {
  [TypePack ::= Identifier (*) , {IDENTIFIER }]
}

-------------------
lalr_state [111]: {
  [ClassDecl ::= CLASS Identifier LCHAVE VarDeclarationList MethodDeclList (*) RCHAVE , {EOF CLASS }]
}
transition on RCHAVE to state [112]

-------------------
lalr_state [112]: {
  [ClassDecl ::= CLASS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE (*) , {EOF CLASS }]
}

-------------------
lalr_state [113]: {
  [MethodDeclList ::= MethodDecl MethodDeclList (*) , {RCHAVE }]
}

-------------------
lalr_state [114]: {
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [MethodDecl ::= PUBLIC TypePack (*) Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
}
transition on Identifier to state [115]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [115]: {
  [FormalParameterListAndParens ::= (*) LPAREN RPAREN , {LCHAVE }]
  [MethodDecl ::= PUBLIC TypePack Identifier (*) FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
  [FormalParameterListAndParens ::= (*) LPAREN FormalParameterList RPAREN , {LCHAVE }]
}
transition on LPAREN to state [117]
transition on FormalParameterListAndParens to state [116]

-------------------
lalr_state [116]: {
  [MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens (*) LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
}
transition on LCHAVE to state [126]

-------------------
lalr_state [117]: {
  [TypePack ::= (*) Identifier , {IDENTIFIER }]
  [FormalParameterList ::= (*) FormalParameter VIRGULA FormalParameterList , {RPAREN }]
  [FormalParameter ::= (*) TypePack Identifier , {VIRGULA RPAREN }]
  [TypePack ::= (*) BOOLEANO , {IDENTIFIER }]
  [FormalParameterListAndParens ::= LPAREN (*) FormalParameterList RPAREN , {LCHAVE }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER LCOCHETE RCOCHETE , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER , {IDENTIFIER }]
  [FormalParameterListAndParens ::= LPAREN (*) RPAREN , {LCHAVE }]
  [FormalParameterList ::= (*) FormalParameter , {RPAREN }]
}
transition on Identifier to state [110]
transition on BOOLEANO to state [106]
transition on IDENTIFIER to state [4]
transition on FormalParameter to state [121]
transition on TypePack to state [120]
transition on FormalParameterList to state [119]
transition on RPAREN to state [118]
transition on INTEGER to state [105]

-------------------
lalr_state [118]: {
  [FormalParameterListAndParens ::= LPAREN RPAREN (*) , {LCHAVE }]
}

-------------------
lalr_state [119]: {
  [FormalParameterListAndParens ::= LPAREN FormalParameterList (*) RPAREN , {LCHAVE }]
}
transition on RPAREN to state [125]

-------------------
lalr_state [120]: {
  [Identifier ::= (*) IDENTIFIER , {VIRGULA RPAREN }]
  [FormalParameter ::= TypePack (*) Identifier , {VIRGULA RPAREN }]
}
transition on Identifier to state [124]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [121]: {
  [FormalParameterList ::= FormalParameter (*) , {RPAREN }]
  [FormalParameterList ::= FormalParameter (*) VIRGULA FormalParameterList , {RPAREN }]
}
transition on VIRGULA to state [122]

-------------------
lalr_state [122]: {
  [TypePack ::= (*) Identifier , {IDENTIFIER }]
  [FormalParameterList ::= FormalParameter VIRGULA (*) FormalParameterList , {RPAREN }]
  [FormalParameterList ::= (*) FormalParameter VIRGULA FormalParameterList , {RPAREN }]
  [FormalParameter ::= (*) TypePack Identifier , {VIRGULA RPAREN }]
  [TypePack ::= (*) BOOLEANO , {IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER LCOCHETE RCOCHETE , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER , {IDENTIFIER }]
  [FormalParameterList ::= (*) FormalParameter , {RPAREN }]
}
transition on Identifier to state [110]
transition on BOOLEANO to state [106]
transition on IDENTIFIER to state [4]
transition on FormalParameterList to state [123]
transition on FormalParameter to state [121]
transition on TypePack to state [120]
transition on INTEGER to state [105]

-------------------
lalr_state [123]: {
  [FormalParameterList ::= FormalParameter VIRGULA FormalParameterList (*) , {RPAREN }]
}

-------------------
lalr_state [124]: {
  [FormalParameter ::= TypePack Identifier (*) , {VIRGULA RPAREN }]
}

-------------------
lalr_state [125]: {
  [FormalParameterListAndParens ::= LPAREN FormalParameterList RPAREN (*) , {LCHAVE }]
}

-------------------
lalr_state [126]: {
  [VarDeclarationList ::= (*) , {BOOLEANO INTEGER IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE (*) VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
  [VarDeclarationList ::= (*) VarDeclarationList VarDeclaration , {BOOLEANO INTEGER IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
}
transition on VarDeclarationList to state [127]

-------------------
lalr_state [127]: {
  [TypePack ::= (*) Identifier , {IDENTIFIER }]
  [Statement ::= (*) LCHAVE StatementList RCHAVE , {IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [Statement ::= (*) SYSO LPAREN Expression RPAREN SCOLON , {IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [StatementList ::= (*) Statement StatementList , {RETURN }]
  [VarDeclaration ::= (*) TypePack Identifier SCOLON , {BOOLEANO INTEGER IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [TypePack ::= (*) BOOLEANO , {IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [VarDeclarationList ::= VarDeclarationList (*) VarDeclaration , {BOOLEANO INTEGER IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [TypePack ::= (*) INTEGER LCOCHETE RCOCHETE , {IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {ASSIGN LCOCHETE IDENTIFIER }]
  [TypePack ::= (*) INTEGER , {IDENTIFIER }]
  [Statement ::= (*) Identifier LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [Statement ::= (*) Identifier ASSIGN Expression SCOLON , {IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList (*) StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
  [StatementList ::= (*) , {RETURN }]
}
transition on LCHAVE to state [21]
transition on IDENTIFIER to state [4]
transition on Statement to state [83]
transition on IF to state [22]
transition on Identifier to state [129]
transition on VarDeclaration to state [109]
transition on SYSO to state [20]
transition on BOOLEANO to state [106]
transition on StatementList to state [128]
transition on INTEGER to state [105]
transition on WHILE to state [19]
transition on TypePack to state [104]

-------------------
lalr_state [128]: {
  [MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList (*) RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
}
transition on RETURN to state [130]

-------------------
lalr_state [129]: {
  [TypePack ::= Identifier (*) , {IDENTIFIER }]
  [Statement ::= Identifier (*) LCOCHETE Expression RCOCHETE ASSIGN Expression SCOLON , {IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
  [Statement ::= Identifier (*) ASSIGN Expression SCOLON , {IF WHILE RETURN SYSO LCHAVE IDENTIFIER }]
}
transition on ASSIGN to state [25]
transition on LCOCHETE to state [24]

-------------------
lalr_state [130]: {
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN (*) Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
  [Expression ::= (*) Expression LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) FALSE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEW INTEGER LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) NEGATION Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) ArrayLength , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLength ::= (*) Expression DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) THIS , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) TRUE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= (*) ArrayLookup , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLookup ::= (*) Expression LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
}
transition on INTEGER_LITERAL to state [36]
transition on LPAREN to state [35]
transition on ArrayLookup to state [34]
transition on ArrayLength to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [131]
transition on NEGATION to state [28]
transition on TRUE to state [27]
transition on NEW to state [26]

-------------------
lalr_state [131]: {
  [ArrayLookup ::= Expression (*) LCOCHETE Expression RCOCHETE , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) DOT Identifier MethodInvocationParameterList , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [ArrayLength ::= Expression (*) DOT LENGTH , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression (*) SCOLON RCHAVE , {PUBLIC RCHAVE }]
  [Expression ::= Expression (*) LESS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI AND LESS DOT LCOCHETE SCOLON }]
}
transition on DOT to state [45]
transition on MULTI to state [44]
transition on LESS to state [43]
transition on MINUS to state [42]
transition on PLUS to state [41]
transition on LCOCHETE to state [40]
transition on AND to state [39]
transition on SCOLON to state [132]

-------------------
lalr_state [132]: {
  [MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON (*) RCHAVE , {PUBLIC RCHAVE }]
}
transition on RCHAVE to state [133]

-------------------
lalr_state [133]: {
  [MethodDecl ::= PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE (*) , {PUBLIC RCHAVE }]
}

-------------------
lalr_state [134]: {
  [TypePack ::= INTEGER LCOCHETE (*) RCOCHETE , {IDENTIFIER }]
}
transition on RCOCHETE to state [135]

-------------------
lalr_state [135]: {
  [TypePack ::= INTEGER LCOCHETE RCOCHETE (*) , {IDENTIFIER }]
}

-------------------
lalr_state [136]: {
  [VarDeclaration ::= TypePack Identifier (*) SCOLON , {BOOLEANO INTEGER IF WHILE RETURN PUBLIC SYSO LCHAVE RCHAVE IDENTIFIER }]
}
transition on SCOLON to state [137]

-------------------
lalr_state [137]: {
  [VarDeclaration ::= TypePack Identifier SCOLON (*) , {BOOLEANO INTEGER IF WHILE RETURN PUBLIC SYSO LCHAVE RCHAVE IDENTIFIER }]
}

-------------------
lalr_state [138]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LCHAVE VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
}
transition on LCHAVE to state [139]

-------------------
lalr_state [139]: {
  [VarDeclarationList ::= (*) , {BOOLEANO INTEGER PUBLIC RCHAVE IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCHAVE (*) VarDeclarationList MethodDeclList RCHAVE , {EOF CLASS }]
  [VarDeclarationList ::= (*) VarDeclarationList VarDeclaration , {BOOLEANO INTEGER PUBLIC RCHAVE IDENTIFIER }]
}
transition on VarDeclarationList to state [140]

-------------------
lalr_state [140]: {
  [TypePack ::= (*) Identifier , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC TypePack Identifier FormalParameterListAndParens LCHAVE VarDeclarationList StatementList RETURN Expression SCOLON RCHAVE , {PUBLIC RCHAVE }]
  [VarDeclaration ::= (*) TypePack Identifier SCOLON , {BOOLEANO INTEGER PUBLIC RCHAVE IDENTIFIER }]
  [TypePack ::= (*) BOOLEANO , {IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDecl MethodDeclList , {RCHAVE }]
  [VarDeclarationList ::= VarDeclarationList (*) VarDeclaration , {BOOLEANO INTEGER PUBLIC RCHAVE IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCHAVE VarDeclarationList (*) MethodDeclList RCHAVE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER LCOCHETE RCOCHETE , {IDENTIFIER }]
  [TypePack ::= (*) INTEGER , {IDENTIFIER }]
  [MethodDeclList ::= (*) , {RCHAVE }]
}
transition on MethodDeclList to state [141]
transition on IDENTIFIER to state [4]
transition on Identifier to state [110]
transition on VarDeclaration to state [109]
transition on MethodDecl to state [108]
transition on PUBLIC to state [107]
transition on BOOLEANO to state [106]
transition on INTEGER to state [105]
transition on TypePack to state [104]

-------------------
lalr_state [141]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCHAVE VarDeclarationList MethodDeclList (*) RCHAVE , {EOF CLASS }]
}
transition on RCHAVE to state [142]

-------------------
lalr_state [142]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCHAVE VarDeclarationList MethodDeclList RCHAVE (*) , {EOF CLASS }]
}

-------------------
lalr_state [143]: {
  [ClassDeclList ::= ClassDecl ClassDeclList (*) , {EOF }]
}

-------------------
lalr_state [144]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 9:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 144)]
From state #2
 [term 0:REDUCE(with prod 7)] [term 9:SHIFT(to state 99)]
From state #3
 [term 37:SHIFT(to state 4)]
From state #4
 [term 10:REDUCE(with prod 18)] [term 26:REDUCE(with prod 18)]
 [term 29:REDUCE(with prod 18)] [term 30:REDUCE(with prod 18)]
 [term 32:REDUCE(with prod 18)] [term 33:REDUCE(with prod 18)]
 [term 34:REDUCE(with prod 18)] [term 36:REDUCE(with prod 18)]
 [term 37:REDUCE(with prod 18)]
From state #5
 [term 34:SHIFT(to state 6)]
From state #6
 [term 11:SHIFT(to state 7)]
From state #7
 [term 12:SHIFT(to state 8)]
From state #8
 [term 13:SHIFT(to state 9)]
From state #9
 [term 14:SHIFT(to state 10)]
From state #10
 [term 32:SHIFT(to state 11)]
From state #11
 [term 4:SHIFT(to state 12)]
From state #12
 [term 30:SHIFT(to state 13)]
From state #13
 [term 31:SHIFT(to state 14)]
From state #14
 [term 37:SHIFT(to state 4)]
From state #15
 [term 33:SHIFT(to state 16)]
From state #16
 [term 34:SHIFT(to state 17)]
From state #17
 [term 5:SHIFT(to state 22)] [term 7:SHIFT(to state 19)]
 [term 20:SHIFT(to state 20)] [term 34:SHIFT(to state 21)]
 [term 37:SHIFT(to state 4)]
From state #18
 [term 35:SHIFT(to state 95)]
From state #19
 [term 32:SHIFT(to state 91)]
From state #20
 [term 32:SHIFT(to state 87)]
From state #21
 [term 5:SHIFT(to state 22)] [term 7:SHIFT(to state 19)]
 [term 20:SHIFT(to state 20)] [term 34:SHIFT(to state 21)]
 [term 35:REDUCE(with prod 3)] [term 37:SHIFT(to state 4)]
From state #22
 [term 32:SHIFT(to state 77)]
From state #23
 [term 26:SHIFT(to state 25)] [term 30:SHIFT(to state 24)]
From state #24
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #25
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #26
 [term 3:SHIFT(to state 65)] [term 37:SHIFT(to state 4)]
From state #27
 [term 21:REDUCE(with prod 27)] [term 22:REDUCE(with prod 27)]
 [term 23:REDUCE(with prod 27)] [term 24:REDUCE(with prod 27)]
 [term 25:REDUCE(with prod 27)] [term 28:REDUCE(with prod 27)]
 [term 29:REDUCE(with prod 27)] [term 30:REDUCE(with prod 27)]
 [term 31:REDUCE(with prod 27)] [term 33:REDUCE(with prod 27)]
 [term 36:REDUCE(with prod 27)]
From state #28
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #29
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 36:SHIFT(to state 63)]
From state #30
 [term 21:REDUCE(with prod 28)] [term 22:REDUCE(with prod 28)]
 [term 23:REDUCE(with prod 28)] [term 24:REDUCE(with prod 28)]
 [term 25:REDUCE(with prod 28)] [term 28:REDUCE(with prod 28)]
 [term 29:REDUCE(with prod 28)] [term 30:REDUCE(with prod 28)]
 [term 31:REDUCE(with prod 28)] [term 33:REDUCE(with prod 28)]
 [term 36:REDUCE(with prod 28)]
From state #31
 [term 21:REDUCE(with prod 29)] [term 22:REDUCE(with prod 29)]
 [term 23:REDUCE(with prod 29)] [term 24:REDUCE(with prod 29)]
 [term 25:REDUCE(with prod 29)] [term 28:REDUCE(with prod 29)]
 [term 29:REDUCE(with prod 29)] [term 30:REDUCE(with prod 29)]
 [term 31:REDUCE(with prod 29)] [term 33:REDUCE(with prod 29)]
 [term 36:REDUCE(with prod 29)]
From state #32
 [term 21:REDUCE(with prod 19)] [term 22:REDUCE(with prod 19)]
 [term 23:REDUCE(with prod 19)] [term 24:REDUCE(with prod 19)]
 [term 25:REDUCE(with prod 19)] [term 28:REDUCE(with prod 19)]
 [term 29:REDUCE(with prod 19)] [term 30:REDUCE(with prod 19)]
 [term 31:REDUCE(with prod 19)] [term 33:REDUCE(with prod 19)]
 [term 36:REDUCE(with prod 19)]
From state #33
 [term 21:REDUCE(with prod 31)] [term 22:REDUCE(with prod 31)]
 [term 23:REDUCE(with prod 31)] [term 24:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 30:REDUCE(with prod 31)]
 [term 31:REDUCE(with prod 31)] [term 33:REDUCE(with prod 31)]
 [term 36:REDUCE(with prod 31)]
From state #34
 [term 21:REDUCE(with prod 32)] [term 22:REDUCE(with prod 32)]
 [term 23:REDUCE(with prod 32)] [term 24:REDUCE(with prod 32)]
 [term 25:REDUCE(with prod 32)] [term 28:REDUCE(with prod 32)]
 [term 29:REDUCE(with prod 32)] [term 30:REDUCE(with prod 32)]
 [term 31:REDUCE(with prod 32)] [term 33:REDUCE(with prod 32)]
 [term 36:REDUCE(with prod 32)]
From state #35
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #36
 [term 21:REDUCE(with prod 35)] [term 22:REDUCE(with prod 35)]
 [term 23:REDUCE(with prod 35)] [term 24:REDUCE(with prod 35)]
 [term 25:REDUCE(with prod 35)] [term 28:REDUCE(with prod 35)]
 [term 29:REDUCE(with prod 35)] [term 30:REDUCE(with prod 35)]
 [term 31:REDUCE(with prod 35)] [term 33:REDUCE(with prod 35)]
 [term 36:REDUCE(with prod 35)]
From state #37
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 33:SHIFT(to state 38)]
From state #38
 [term 21:REDUCE(with prod 25)] [term 22:REDUCE(with prod 25)]
 [term 23:REDUCE(with prod 25)] [term 24:REDUCE(with prod 25)]
 [term 25:REDUCE(with prod 25)] [term 28:REDUCE(with prod 25)]
 [term 29:REDUCE(with prod 25)] [term 30:REDUCE(with prod 25)]
 [term 31:REDUCE(with prod 25)] [term 33:REDUCE(with prod 25)]
 [term 36:REDUCE(with prod 25)]
From state #39
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #40
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #41
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #42
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #43
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #44
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #45
 [term 18:SHIFT(to state 46)] [term 37:SHIFT(to state 4)]
From state #46
 [term 21:REDUCE(with prod 36)] [term 22:REDUCE(with prod 36)]
 [term 23:REDUCE(with prod 36)] [term 24:REDUCE(with prod 36)]
 [term 25:REDUCE(with prod 36)] [term 28:REDUCE(with prod 36)]
 [term 29:REDUCE(with prod 36)] [term 30:REDUCE(with prod 36)]
 [term 31:REDUCE(with prod 36)] [term 33:REDUCE(with prod 36)]
 [term 36:REDUCE(with prod 36)]
From state #47
 [term 32:SHIFT(to state 48)]
From state #48
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 33:SHIFT(to state 52)] [term 37:SHIFT(to state 32)]
 [term 38:SHIFT(to state 36)]
From state #49
 [term 21:REDUCE(with prod 34)] [term 22:REDUCE(with prod 34)]
 [term 23:REDUCE(with prod 34)] [term 24:REDUCE(with prod 34)]
 [term 25:REDUCE(with prod 34)] [term 28:REDUCE(with prod 34)]
 [term 29:REDUCE(with prod 34)] [term 30:REDUCE(with prod 34)]
 [term 31:REDUCE(with prod 34)] [term 33:REDUCE(with prod 34)]
 [term 36:REDUCE(with prod 34)]
From state #50
 [term 33:SHIFT(to state 55)]
From state #51
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 29:SHIFT(to state 53)] [term 30:SHIFT(to state 40)]
 [term 33:REDUCE(with prod 52)]
From state #52
 [term 21:REDUCE(with prod 50)] [term 22:REDUCE(with prod 50)]
 [term 23:REDUCE(with prod 50)] [term 24:REDUCE(with prod 50)]
 [term 25:REDUCE(with prod 50)] [term 28:REDUCE(with prod 50)]
 [term 29:REDUCE(with prod 50)] [term 30:REDUCE(with prod 50)]
 [term 31:REDUCE(with prod 50)] [term 33:REDUCE(with prod 50)]
 [term 36:REDUCE(with prod 50)]
From state #53
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #54
 [term 33:REDUCE(with prod 53)]
From state #55
 [term 21:REDUCE(with prod 51)] [term 22:REDUCE(with prod 51)]
 [term 23:REDUCE(with prod 51)] [term 24:REDUCE(with prod 51)]
 [term 25:REDUCE(with prod 51)] [term 28:REDUCE(with prod 51)]
 [term 29:REDUCE(with prod 51)] [term 30:REDUCE(with prod 51)]
 [term 31:REDUCE(with prod 51)] [term 33:REDUCE(with prod 51)]
 [term 36:REDUCE(with prod 51)]
From state #56
 [term 21:REDUCE(with prod 22)] [term 22:REDUCE(with prod 22)]
 [term 23:REDUCE(with prod 22)] [term 24:REDUCE(with prod 22)]
 [term 25:REDUCE(with prod 22)] [term 28:SHIFT(to state 45)]
 [term 29:REDUCE(with prod 22)] [term 30:REDUCE(with prod 22)]
 [term 31:REDUCE(with prod 22)] [term 33:REDUCE(with prod 22)]
 [term 36:REDUCE(with prod 22)]
From state #57
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:REDUCE(with prod 23)]
 [term 25:REDUCE(with prod 23)] [term 28:SHIFT(to state 45)]
 [term 29:REDUCE(with prod 23)] [term 30:REDUCE(with prod 23)]
 [term 31:REDUCE(with prod 23)] [term 33:REDUCE(with prod 23)]
 [term 36:REDUCE(with prod 23)]
From state #58
 [term 21:REDUCE(with prod 21)] [term 22:REDUCE(with prod 21)]
 [term 23:SHIFT(to state 44)] [term 24:REDUCE(with prod 21)]
 [term 25:REDUCE(with prod 21)] [term 28:SHIFT(to state 45)]
 [term 29:REDUCE(with prod 21)] [term 30:REDUCE(with prod 21)]
 [term 31:REDUCE(with prod 21)] [term 33:REDUCE(with prod 21)]
 [term 36:REDUCE(with prod 21)]
From state #59
 [term 21:REDUCE(with prod 20)] [term 22:REDUCE(with prod 20)]
 [term 23:SHIFT(to state 44)] [term 24:REDUCE(with prod 20)]
 [term 25:REDUCE(with prod 20)] [term 28:SHIFT(to state 45)]
 [term 29:REDUCE(with prod 20)] [term 30:REDUCE(with prod 20)]
 [term 31:REDUCE(with prod 20)] [term 33:REDUCE(with prod 20)]
 [term 36:REDUCE(with prod 20)]
From state #60
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 31:SHIFT(to state 61)]
From state #61
 [term 21:REDUCE(with prod 37)] [term 22:REDUCE(with prod 37)]
 [term 23:REDUCE(with prod 37)] [term 24:REDUCE(with prod 37)]
 [term 25:REDUCE(with prod 37)] [term 28:REDUCE(with prod 37)]
 [term 29:REDUCE(with prod 37)] [term 30:REDUCE(with prod 37)]
 [term 31:REDUCE(with prod 37)] [term 33:REDUCE(with prod 37)]
 [term 36:REDUCE(with prod 37)]
From state #62
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:REDUCE(with prod 24)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 29:REDUCE(with prod 24)] [term 30:REDUCE(with prod 24)]
 [term 31:REDUCE(with prod 24)] [term 33:REDUCE(with prod 24)]
 [term 36:REDUCE(with prod 24)]
From state #63
 [term 5:REDUCE(with prod 12)] [term 6:REDUCE(with prod 12)]
 [term 7:REDUCE(with prod 12)] [term 8:REDUCE(with prod 12)]
 [term 20:REDUCE(with prod 12)] [term 34:REDUCE(with prod 12)]
 [term 35:REDUCE(with prod 12)] [term 37:REDUCE(with prod 12)]
From state #64
 [term 21:REDUCE(with prod 26)] [term 22:REDUCE(with prod 26)]
 [term 23:REDUCE(with prod 26)] [term 24:REDUCE(with prod 26)]
 [term 25:REDUCE(with prod 26)] [term 28:SHIFT(to state 45)]
 [term 29:REDUCE(with prod 26)] [term 30:REDUCE(with prod 26)]
 [term 31:REDUCE(with prod 26)] [term 33:REDUCE(with prod 26)]
 [term 36:REDUCE(with prod 26)]
From state #65
 [term 30:SHIFT(to state 69)]
From state #66
 [term 32:SHIFT(to state 67)]
From state #67
 [term 33:SHIFT(to state 68)]
From state #68
 [term 21:REDUCE(with prod 30)] [term 22:REDUCE(with prod 30)]
 [term 23:REDUCE(with prod 30)] [term 24:REDUCE(with prod 30)]
 [term 25:REDUCE(with prod 30)] [term 28:REDUCE(with prod 30)]
 [term 29:REDUCE(with prod 30)] [term 30:REDUCE(with prod 30)]
 [term 31:REDUCE(with prod 30)] [term 33:REDUCE(with prod 30)]
 [term 36:REDUCE(with prod 30)]
From state #69
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #70
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 31:SHIFT(to state 71)]
From state #71
 [term 21:REDUCE(with prod 33)] [term 22:REDUCE(with prod 33)]
 [term 23:REDUCE(with prod 33)] [term 24:REDUCE(with prod 33)]
 [term 25:REDUCE(with prod 33)] [term 28:REDUCE(with prod 33)]
 [term 29:REDUCE(with prod 33)] [term 30:REDUCE(with prod 33)]
 [term 31:REDUCE(with prod 33)] [term 33:REDUCE(with prod 33)]
 [term 36:REDUCE(with prod 33)]
From state #72
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 31:SHIFT(to state 73)]
From state #73
 [term 26:SHIFT(to state 74)]
From state #74
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #75
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 36:SHIFT(to state 76)]
From state #76
 [term 5:REDUCE(with prod 15)] [term 6:REDUCE(with prod 15)]
 [term 7:REDUCE(with prod 15)] [term 8:REDUCE(with prod 15)]
 [term 20:REDUCE(with prod 15)] [term 34:REDUCE(with prod 15)]
 [term 35:REDUCE(with prod 15)] [term 37:REDUCE(with prod 15)]
From state #77
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #78
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 33:SHIFT(to state 79)]
From state #79
 [term 5:SHIFT(to state 22)] [term 7:SHIFT(to state 19)]
 [term 20:SHIFT(to state 20)] [term 34:SHIFT(to state 21)]
 [term 37:SHIFT(to state 4)]
From state #80
 [term 6:SHIFT(to state 81)]
From state #81
 [term 5:SHIFT(to state 22)] [term 7:SHIFT(to state 19)]
 [term 20:SHIFT(to state 20)] [term 34:SHIFT(to state 21)]
 [term 37:SHIFT(to state 4)]
From state #82
 [term 5:REDUCE(with prod 13)] [term 6:REDUCE(with prod 13)]
 [term 7:REDUCE(with prod 13)] [term 8:REDUCE(with prod 13)]
 [term 20:REDUCE(with prod 13)] [term 34:REDUCE(with prod 13)]
 [term 35:REDUCE(with prod 13)] [term 37:REDUCE(with prod 13)]
From state #83
 [term 5:SHIFT(to state 22)] [term 7:SHIFT(to state 19)]
 [term 8:REDUCE(with prod 3)] [term 20:SHIFT(to state 20)]
 [term 34:SHIFT(to state 21)] [term 35:REDUCE(with prod 3)]
 [term 37:SHIFT(to state 4)]
From state #84
 [term 35:SHIFT(to state 85)]
From state #85
 [term 5:REDUCE(with prod 17)] [term 6:REDUCE(with prod 17)]
 [term 7:REDUCE(with prod 17)] [term 8:REDUCE(with prod 17)]
 [term 20:REDUCE(with prod 17)] [term 34:REDUCE(with prod 17)]
 [term 35:REDUCE(with prod 17)] [term 37:REDUCE(with prod 17)]
From state #86
 [term 8:REDUCE(with prod 2)] [term 35:REDUCE(with prod 2)]
From state #87
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #88
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 33:SHIFT(to state 89)]
From state #89
 [term 36:SHIFT(to state 90)]
From state #90
 [term 5:REDUCE(with prod 14)] [term 6:REDUCE(with prod 14)]
 [term 7:REDUCE(with prod 14)] [term 8:REDUCE(with prod 14)]
 [term 20:REDUCE(with prod 14)] [term 34:REDUCE(with prod 14)]
 [term 35:REDUCE(with prod 14)] [term 37:REDUCE(with prod 14)]
From state #91
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #92
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 33:SHIFT(to state 93)]
From state #93
 [term 5:SHIFT(to state 22)] [term 7:SHIFT(to state 19)]
 [term 20:SHIFT(to state 20)] [term 34:SHIFT(to state 21)]
 [term 37:SHIFT(to state 4)]
From state #94
 [term 5:REDUCE(with prod 16)] [term 6:REDUCE(with prod 16)]
 [term 7:REDUCE(with prod 16)] [term 8:REDUCE(with prod 16)]
 [term 20:REDUCE(with prod 16)] [term 34:REDUCE(with prod 16)]
 [term 35:REDUCE(with prod 16)] [term 37:REDUCE(with prod 16)]
From state #95
 [term 35:SHIFT(to state 96)]
From state #96
 [term 0:REDUCE(with prod 4)] [term 9:REDUCE(with prod 4)]
From state #97
 [term 0:REDUCE(with prod 0)]
From state #98
 [term 0:REDUCE(with prod 7)] [term 9:SHIFT(to state 99)]
From state #99
 [term 37:SHIFT(to state 4)]
From state #100
 [term 10:SHIFT(to state 101)] [term 34:SHIFT(to state 102)]
From state #101
 [term 37:SHIFT(to state 4)]
From state #102
 [term 2:REDUCE(with prod 43)] [term 3:REDUCE(with prod 43)]
 [term 11:REDUCE(with prod 43)] [term 35:REDUCE(with prod 43)]
 [term 37:REDUCE(with prod 43)]
From state #103
 [term 2:SHIFT(to state 106)] [term 3:SHIFT(to state 105)]
 [term 11:SHIFT(to state 107)] [term 35:REDUCE(with prod 9)]
 [term 37:SHIFT(to state 4)]
From state #104
 [term 37:SHIFT(to state 4)]
From state #105
 [term 30:SHIFT(to state 134)] [term 37:REDUCE(with prod 38)]
From state #106
 [term 37:REDUCE(with prod 39)]
From state #107
 [term 2:SHIFT(to state 106)] [term 3:SHIFT(to state 105)]
 [term 37:SHIFT(to state 4)]
From state #108
 [term 11:SHIFT(to state 107)] [term 35:REDUCE(with prod 9)]
From state #109
 [term 2:REDUCE(with prod 44)] [term 3:REDUCE(with prod 44)]
 [term 5:REDUCE(with prod 44)] [term 7:REDUCE(with prod 44)]
 [term 8:REDUCE(with prod 44)] [term 11:REDUCE(with prod 44)]
 [term 20:REDUCE(with prod 44)] [term 34:REDUCE(with prod 44)]
 [term 35:REDUCE(with prod 44)] [term 37:REDUCE(with prod 44)]
From state #110
 [term 37:REDUCE(with prod 40)]
From state #111
 [term 35:SHIFT(to state 112)]
From state #112
 [term 0:REDUCE(with prod 5)] [term 9:REDUCE(with prod 5)]
From state #113
 [term 35:REDUCE(with prod 10)]
From state #114
 [term 37:SHIFT(to state 4)]
From state #115
 [term 32:SHIFT(to state 117)]
From state #116
 [term 34:SHIFT(to state 126)]
From state #117
 [term 2:SHIFT(to state 106)] [term 3:SHIFT(to state 105)]
 [term 33:SHIFT(to state 118)] [term 37:SHIFT(to state 4)]
From state #118
 [term 34:REDUCE(with prod 46)]
From state #119
 [term 33:SHIFT(to state 125)]
From state #120
 [term 37:SHIFT(to state 4)]
From state #121
 [term 29:SHIFT(to state 122)] [term 33:REDUCE(with prod 49)]
From state #122
 [term 2:SHIFT(to state 106)] [term 3:SHIFT(to state 105)]
 [term 37:SHIFT(to state 4)]
From state #123
 [term 33:REDUCE(with prod 48)]
From state #124
 [term 29:REDUCE(with prod 45)] [term 33:REDUCE(with prod 45)]
From state #125
 [term 34:REDUCE(with prod 47)]
From state #126
 [term 2:REDUCE(with prod 43)] [term 3:REDUCE(with prod 43)]
 [term 5:REDUCE(with prod 43)] [term 7:REDUCE(with prod 43)]
 [term 8:REDUCE(with prod 43)] [term 20:REDUCE(with prod 43)]
 [term 34:REDUCE(with prod 43)] [term 37:REDUCE(with prod 43)]
From state #127
 [term 2:SHIFT(to state 106)] [term 3:SHIFT(to state 105)]
 [term 5:SHIFT(to state 22)] [term 7:SHIFT(to state 19)]
 [term 8:REDUCE(with prod 3)] [term 20:SHIFT(to state 20)]
 [term 34:SHIFT(to state 21)] [term 37:SHIFT(to state 4)]
From state #128
 [term 8:SHIFT(to state 130)]
From state #129
 [term 26:SHIFT(to state 25)] [term 30:SHIFT(to state 24)]
 [term 37:REDUCE(with prod 40)]
From state #130
 [term 15:SHIFT(to state 27)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 31)] [term 19:SHIFT(to state 26)]
 [term 27:SHIFT(to state 28)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 36)]
From state #131
 [term 21:SHIFT(to state 41)] [term 22:SHIFT(to state 42)]
 [term 23:SHIFT(to state 44)] [term 24:SHIFT(to state 39)]
 [term 25:SHIFT(to state 43)] [term 28:SHIFT(to state 45)]
 [term 30:SHIFT(to state 40)] [term 36:SHIFT(to state 132)]
From state #132
 [term 35:SHIFT(to state 133)]
From state #133
 [term 11:REDUCE(with prod 11)] [term 35:REDUCE(with prod 11)]
From state #134
 [term 31:SHIFT(to state 135)]
From state #135
 [term 37:REDUCE(with prod 41)]
From state #136
 [term 36:SHIFT(to state 137)]
From state #137
 [term 2:REDUCE(with prod 42)] [term 3:REDUCE(with prod 42)]
 [term 5:REDUCE(with prod 42)] [term 7:REDUCE(with prod 42)]
 [term 8:REDUCE(with prod 42)] [term 11:REDUCE(with prod 42)]
 [term 20:REDUCE(with prod 42)] [term 34:REDUCE(with prod 42)]
 [term 35:REDUCE(with prod 42)] [term 37:REDUCE(with prod 42)]
From state #138
 [term 34:SHIFT(to state 139)]
From state #139
 [term 2:REDUCE(with prod 43)] [term 3:REDUCE(with prod 43)]
 [term 11:REDUCE(with prod 43)] [term 35:REDUCE(with prod 43)]
 [term 37:REDUCE(with prod 43)]
From state #140
 [term 2:SHIFT(to state 106)] [term 3:SHIFT(to state 105)]
 [term 11:SHIFT(to state 107)] [term 35:REDUCE(with prod 9)]
 [term 37:SHIFT(to state 4)]
From state #141
 [term 35:SHIFT(to state 142)]
From state #142
 [term 0:REDUCE(with prod 6)] [term 9:REDUCE(with prod 6)]
From state #143
 [term 0:REDUCE(with prod 8)]
From state #144
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 2->state 2]
From state #1
From state #2
 [non term 18->state 98] [non term 19->state 97]
From state #3
 [non term 9->state 5]
From state #4
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
From state #11
From state #12
From state #13
From state #14
 [non term 9->state 15]
From state #15
From state #16
From state #17
 [non term 5->state 18] [non term 9->state 23]
From state #18
From state #19
From state #20
From state #21
 [non term 1->state 84] [non term 5->state 83] [non term 9->state 23]
From state #22
From state #23
From state #24
 [non term 6->state 72] [non term 7->state 34] [non term 8->state 33]
From state #25
 [non term 6->state 29] [non term 7->state 34] [non term 8->state 33]
From state #26
 [non term 9->state 66]
From state #27
From state #28
 [non term 6->state 64] [non term 7->state 34] [non term 8->state 33]
From state #29
From state #30
From state #31
From state #32
From state #33
From state #34
From state #35
 [non term 6->state 37] [non term 7->state 34] [non term 8->state 33]
From state #36
From state #37
From state #38
From state #39
 [non term 6->state 62] [non term 7->state 34] [non term 8->state 33]
From state #40
 [non term 6->state 60] [non term 7->state 34] [non term 8->state 33]
From state #41
 [non term 6->state 59] [non term 7->state 34] [non term 8->state 33]
From state #42
 [non term 6->state 58] [non term 7->state 34] [non term 8->state 33]
From state #43
 [non term 6->state 57] [non term 7->state 34] [non term 8->state 33]
From state #44
 [non term 6->state 56] [non term 7->state 34] [non term 8->state 33]
From state #45
 [non term 9->state 47]
From state #46
From state #47
 [non term 16->state 49]
From state #48
 [non term 6->state 51] [non term 7->state 34] [non term 8->state 33]
 [non term 17->state 50]
From state #49
From state #50
From state #51
From state #52
From state #53
 [non term 6->state 51] [non term 7->state 34] [non term 8->state 33]
 [non term 17->state 54]
From state #54
From state #55
From state #56
From state #57
From state #58
From state #59
From state #60
From state #61
From state #62
From state #63
From state #64
From state #65
From state #66
From state #67
From state #68
From state #69
 [non term 6->state 70] [non term 7->state 34] [non term 8->state 33]
From state #70
From state #71
From state #72
From state #73
From state #74
 [non term 6->state 75] [non term 7->state 34] [non term 8->state 33]
From state #75
From state #76
From state #77
 [non term 6->state 78] [non term 7->state 34] [non term 8->state 33]
From state #78
From state #79
 [non term 5->state 80] [non term 9->state 23]
From state #80
From state #81
 [non term 5->state 82] [non term 9->state 23]
From state #82
From state #83
 [non term 1->state 86] [non term 5->state 83] [non term 9->state 23]
From state #84
From state #85
From state #86
From state #87
 [non term 6->state 88] [non term 7->state 34] [non term 8->state 33]
From state #88
From state #89
From state #90
From state #91
 [non term 6->state 92] [non term 7->state 34] [non term 8->state 33]
From state #92
From state #93
 [non term 5->state 94] [non term 9->state 23]
From state #94
From state #95
From state #96
From state #97
From state #98
 [non term 18->state 98] [non term 19->state 143]
From state #99
 [non term 9->state 100]
From state #100
From state #101
 [non term 9->state 138]
From state #102
 [non term 12->state 103]
From state #103
 [non term 3->state 108] [non term 4->state 111] [non term 9->state 110]
 [non term 10->state 104] [non term 11->state 109]
From state #104
 [non term 9->state 136]
From state #105
From state #106
From state #107
 [non term 9->state 110] [non term 10->state 114]
From state #108
 [non term 3->state 108] [non term 4->state 113]
From state #109
From state #110
From state #111
From state #112
From state #113
From state #114
 [non term 9->state 115]
From state #115
 [non term 15->state 116]
From state #116
From state #117
 [non term 9->state 110] [non term 10->state 120] [non term 13->state 121]
 [non term 14->state 119]
From state #118
From state #119
From state #120
 [non term 9->state 124]
From state #121
From state #122
 [non term 9->state 110] [non term 10->state 120] [non term 13->state 121]
 [non term 14->state 123]
From state #123
From state #124
From state #125
From state #126
 [non term 12->state 127]
From state #127
 [non term 1->state 128] [non term 5->state 83] [non term 9->state 129]
 [non term 10->state 104] [non term 11->state 109]
From state #128
From state #129
From state #130
 [non term 6->state 131] [non term 7->state 34] [non term 8->state 33]
From state #131
From state #132
From state #133
From state #134
From state #135
From state #136
From state #137
From state #138
From state #139
 [non term 12->state 140]
From state #140
 [non term 3->state 108] [non term 4->state 141] [non term 9->state 110]
 [non term 10->state 104] [non term 11->state 109]
From state #141
From state #142
From state #143
From state #144
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 0 warnings
  39 terminals, 20 non-terminals, and 54 productions declared, 
  producing 145 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
